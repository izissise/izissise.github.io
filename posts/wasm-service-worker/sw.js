function fetch_or_cache(e,t){return new Promise((n,s)=>{const o=t=>caches.open("offline").then(t=>t.match(e)).then(e=>e.arrayBuffer()).then(t=>{console.log("cache hit!",e,"size",t.byteLength),n(t)},e=>s([t,e]));if(typeof XMLHttpRequest!="undefined"){const s=new XMLHttpRequest;s.responseType="arraybuffer",s.open("GET",e),s.onprogress=t,s.onload=()=>s.status!=200?o(s):caches.open("offline").then(t=>{let n=new Response(new Blob([s.response]));return t.put(e,n)}).then(()=>{n(s.response)}),s.onerror=o,s.send()}else return fetch(e).then(t=>t.ok?caches.open("offline").then(n=>n.put(e,t)).then(()=>t.arrayBuffer()):o(t)).then(n,o)})}function load_and_init_wasm(e,t){return fetch_or_cache(e,t).then(e=>wasm_bindgen.initSync({module:e}))}if(navigator.constructor.name==="WorkerNavigator"){const e=self.serviceWorker.scriptURL.replace(/\.js$/,"_bg.wasm");load_and_init_wasm(e),self.addEventListener("install",t=>{t.waitUntil(load_and_init_wasm(e)),t.waitUntil(self.skipWaiting())}),self.addEventListener("activate",t=>{t.waitUntil(load_and_init_wasm(e)),t.waitUntil(clients.claim())}),self.onfetch=e=>{console.log("js fetch")}}